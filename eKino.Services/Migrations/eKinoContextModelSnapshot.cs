// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eKino.Services.Database;

#nullable disable

namespace eKino.Services.Migrations
{
    [DbContext(typeof(eKinoContext))]
    partial class eKinoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eKino.Services.Database.Auditorium", b =>
                {
                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int")
                        .HasColumnName("AuditoriumID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuditoriumId");

                    b.ToTable("Auditorium", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorID");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("DirectorId");

                    b.ToTable("Director", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.IsDeleted", b =>
                {
                    b.Property<bool?>("IsDeleted1")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.ToTable("IsDeleted", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorID");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RunningTime")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("MovieId");

                    b.HasIndex(new[] { "DirectorId" }, "IX_Movie_DirectorID");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.MovieGenre", b =>
                {
                    b.Property<int>("MovieGenreId")
                        .HasColumnType("int")
                        .HasColumnName("MovieGenreID");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.HasKey("MovieGenreId");

                    b.HasIndex(new[] { "GenreId" }, "IX_MovieGenre_GenreID");

                    b.HasIndex(new[] { "MovieId" }, "IX_MovieGenre_MovieID");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Projection", b =>
                {
                    b.Property<int>("ProjectionId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectionID");

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int")
                        .HasColumnName("AuditoriumID");

                    b.Property<DateTime?>("DateOfProjection")
                        .HasColumnType("date");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<decimal?>("TicketPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ProjectionId");

                    b.HasIndex(new[] { "AuditoriumId" }, "IX_Projection_AuditoriumID");

                    b.HasIndex(new[] { "MovieId" }, "IX_Projection_MovieID");

                    b.ToTable("Projection", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .HasColumnType("int")
                        .HasColumnName("RatingID");

                    b.Property<DateTime?>("DateOfRating")
                        .HasColumnType("date");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex(new[] { "MovieId" }, "IX_Rating_MovieID");

                    b.HasIndex(new[] { "UserId" }, "IX_Rating_UserID");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    b.Property<string>("Column")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateOfReservation")
                        .HasColumnType("date");

                    b.Property<string>("NumTicket")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectionId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectionID");

                    b.Property<string>("Row")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReservationId");

                    b.HasIndex(new[] { "ProjectionId" }, "IX_Reservation_ProjectionID");

                    b.HasIndex(new[] { "UserId" }, "IX_Reservation_UserID");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("DateOfTransaction")
                        .HasColumnType("date");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "ReservationId" }, "IX_Transaction_ReservationID");

                    b.HasIndex(new[] { "UserId" }, "IX_Transaction_UserID");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("date");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRole_RoleID");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRole_UserID");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Movie", b =>
                {
                    b.HasOne("eKino.Services.Database.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("eKino.Services.Database.MovieGenre", b =>
                {
                    b.HasOne("eKino.Services.Database.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.Services.Database.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eKino.Services.Database.Projection", b =>
                {
                    b.HasOne("eKino.Services.Database.Auditorium", "Auditorium")
                        .WithMany("Projections")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.Services.Database.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorium");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eKino.Services.Database.Rating", b =>
                {
                    b.HasOne("eKino.Services.Database.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.Reservation", b =>
                {
                    b.HasOne("eKino.Services.Database.Projection", "Projection")
                        .WithMany("Reservations")
                        .HasForeignKey("ProjectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Projection");

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.Transaction", b =>
                {
                    b.HasOne("eKino.Services.Database.Reservation", "Reservation")
                        .WithMany("Transactions")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Reservation");

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.UserRole", b =>
                {
                    b.HasOne("eKino.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.Auditorium", b =>
                {
                    b.Navigation("Projections");
                });

            modelBuilder.Entity("eKino.Services.Database.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("eKino.Services.Database.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("eKino.Services.Database.Movie", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("eKino.Services.Database.Projection", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("eKino.Services.Database.Reservation", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("eKino.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eKino.Services.Database.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reservations");

                    b.Navigation("Transactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
